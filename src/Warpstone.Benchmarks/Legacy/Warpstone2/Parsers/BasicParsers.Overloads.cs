// <auto-generated />
#pragma warning disable

namespace Legacy.Warpstone2.Parsers;

public static partial class BasicParsers
{
    /// <summary>
    /// Creates a parser that first applies the given parser and then applies a transformation on its result.
    /// </summary>
    /// <typeparam name="T1">The first result type of the given input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the given input parser.</typeparam>
    /// <typeparam name="TOutput">The result type of the transformation.</typeparam>
    /// <param name="parser">The given input parser.</param>
    /// <param name="transformation">The transformation to apply on the parser result.</param>
    /// <returns>A parser first applying the given parser and then applying a transformation on its result.</returns>
    public static IParser<TOutput> Transform<T1, T2, TOutput>(this IParser<(T1 First, T2 Second)> parser, Func<T1, T2, TOutput> transformation)
        => parser.Transform(x => transformation(x.First, x.Second));

    /// <summary>
    /// Creates a parser that first applies the given parser and then applies a transformation on its result.
    /// </summary>
    /// <typeparam name="T1">The first result type of the given input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the given input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the given input parser.</typeparam>
    /// <typeparam name="TOutput">The result type of the transformation.</typeparam>
    /// <param name="parser">The given input parser.</param>
    /// <param name="transformation">The transformation to apply on the parser result.</param>
    /// <returns>A parser first applying the given parser and then applying a transformation on its result.</returns>
    public static IParser<TOutput> Transform<T1, T2, T3, TOutput>(this IParser<(T1 First, T2 Second, T3 Third)> parser, Func<T1, T2, T3, TOutput> transformation)
        => parser.Transform(x => transformation(x.First, x.Second, x.Third));

    /// <summary>
    /// Creates a parser that first applies the given parser and then applies a transformation on its result.
    /// </summary>
    /// <typeparam name="T1">The first result type of the given input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the given input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the given input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the given input parser.</typeparam>
    /// <typeparam name="TOutput">The result type of the transformation.</typeparam>
    /// <param name="parser">The given input parser.</param>
    /// <param name="transformation">The transformation to apply on the parser result.</param>
    /// <returns>A parser first applying the given parser and then applying a transformation on its result.</returns>
    public static IParser<TOutput> Transform<T1, T2, T3, T4, TOutput>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth)> parser, Func<T1, T2, T3, T4, TOutput> transformation)
        => parser.Transform(x => transformation(x.First, x.Second, x.Third, x.Fourth));

    /// <summary>
    /// Creates a parser that first applies the given parser and then applies a transformation on its result.
    /// </summary>
    /// <typeparam name="T1">The first result type of the given input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the given input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the given input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the given input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the given input parser.</typeparam>
    /// <typeparam name="TOutput">The result type of the transformation.</typeparam>
    /// <param name="parser">The given input parser.</param>
    /// <param name="transformation">The transformation to apply on the parser result.</param>
    /// <returns>A parser first applying the given parser and then applying a transformation on its result.</returns>
    public static IParser<TOutput> Transform<T1, T2, T3, T4, T5, TOutput>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth)> parser, Func<T1, T2, T3, T4, T5, TOutput> transformation)
        => parser.Transform(x => transformation(x.First, x.Second, x.Third, x.Fourth, x.Fifth));

    /// <summary>
    /// Creates a parser that first applies the given parser and then applies a transformation on its result.
    /// </summary>
    /// <typeparam name="T1">The first result type of the given input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the given input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the given input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the given input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the given input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the given input parser.</typeparam>
    /// <typeparam name="TOutput">The result type of the transformation.</typeparam>
    /// <param name="parser">The given input parser.</param>
    /// <param name="transformation">The transformation to apply on the parser result.</param>
    /// <returns>A parser first applying the given parser and then applying a transformation on its result.</returns>
    public static IParser<TOutput> Transform<T1, T2, T3, T4, T5, T6, TOutput>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth)> parser, Func<T1, T2, T3, T4, T5, T6, TOutput> transformation)
        => parser.Transform(x => transformation(x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth));

    /// <summary>
    /// Creates a parser that first applies the given parser and then applies a transformation on its result.
    /// </summary>
    /// <typeparam name="T1">The first result type of the given input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the given input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the given input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the given input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the given input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the given input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the given input parser.</typeparam>
    /// <typeparam name="TOutput">The result type of the transformation.</typeparam>
    /// <param name="parser">The given input parser.</param>
    /// <param name="transformation">The transformation to apply on the parser result.</param>
    /// <returns>A parser first applying the given parser and then applying a transformation on its result.</returns>
    public static IParser<TOutput> Transform<T1, T2, T3, T4, T5, T6, T7, TOutput>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh)> parser, Func<T1, T2, T3, T4, T5, T6, T7, TOutput> transformation)
        => parser.Transform(x => transformation(x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh));

    /// <summary>
    /// Creates a parser that first applies the given parser and then applies a transformation on its result.
    /// </summary>
    /// <typeparam name="T1">The first result type of the given input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the given input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the given input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the given input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the given input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the given input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the given input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the given input parser.</typeparam>
    /// <typeparam name="TOutput">The result type of the transformation.</typeparam>
    /// <param name="parser">The given input parser.</param>
    /// <param name="transformation">The transformation to apply on the parser result.</param>
    /// <returns>A parser first applying the given parser and then applying a transformation on its result.</returns>
    public static IParser<TOutput> Transform<T1, T2, T3, T4, T5, T6, T7, T8, TOutput>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth)> parser, Func<T1, T2, T3, T4, T5, T6, T7, T8, TOutput> transformation)
        => parser.Transform(x => transformation(x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth));

    /// <summary>
    /// Creates a parser that first applies the given parser and then applies a transformation on its result.
    /// </summary>
    /// <typeparam name="T1">The first result type of the given input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the given input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the given input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the given input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the given input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the given input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the given input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the given input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the given input parser.</typeparam>
    /// <typeparam name="TOutput">The result type of the transformation.</typeparam>
    /// <param name="parser">The given input parser.</param>
    /// <param name="transformation">The transformation to apply on the parser result.</param>
    /// <returns>A parser first applying the given parser and then applying a transformation on its result.</returns>
    public static IParser<TOutput> Transform<T1, T2, T3, T4, T5, T6, T7, T8, T9, TOutput>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth)> parser, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TOutput> transformation)
        => parser.Transform(x => transformation(x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth));

    /// <summary>
    /// Creates a parser that first applies the given parser and then applies a transformation on its result.
    /// </summary>
    /// <typeparam name="T1">The first result type of the given input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the given input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the given input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the given input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the given input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the given input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the given input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the given input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the given input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the given input parser.</typeparam>
    /// <typeparam name="TOutput">The result type of the transformation.</typeparam>
    /// <param name="parser">The given input parser.</param>
    /// <param name="transformation">The transformation to apply on the parser result.</param>
    /// <returns>A parser first applying the given parser and then applying a transformation on its result.</returns>
    public static IParser<TOutput> Transform<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TOutput>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth)> parser, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TOutput> transformation)
        => parser.Transform(x => transformation(x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth));

    /// <summary>
    /// Creates a parser that first applies the given parser and then applies a transformation on its result.
    /// </summary>
    /// <typeparam name="T1">The first result type of the given input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the given input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the given input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the given input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the given input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the given input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the given input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the given input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the given input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the given input parser.</typeparam>
    /// <typeparam name="T11">The eleventh result type of the given input parser.</typeparam>
    /// <typeparam name="TOutput">The result type of the transformation.</typeparam>
    /// <param name="parser">The given input parser.</param>
    /// <param name="transformation">The transformation to apply on the parser result.</param>
    /// <returns>A parser first applying the given parser and then applying a transformation on its result.</returns>
    public static IParser<TOutput> Transform<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TOutput>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh)> parser, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TOutput> transformation)
        => parser.Transform(x => transformation(x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth, x.Eleventh));

    /// <summary>
    /// Creates a parser that first applies the given parser and then applies a transformation on its result.
    /// </summary>
    /// <typeparam name="T1">The first result type of the given input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the given input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the given input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the given input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the given input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the given input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the given input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the given input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the given input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the given input parser.</typeparam>
    /// <typeparam name="T11">The eleventh result type of the given input parser.</typeparam>
    /// <typeparam name="T12">The twelfth result type of the given input parser.</typeparam>
    /// <typeparam name="TOutput">The result type of the transformation.</typeparam>
    /// <param name="parser">The given input parser.</param>
    /// <param name="transformation">The transformation to apply on the parser result.</param>
    /// <returns>A parser first applying the given parser and then applying a transformation on its result.</returns>
    public static IParser<TOutput> Transform<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TOutput>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth)> parser, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TOutput> transformation)
        => parser.Transform(x => transformation(x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth, x.Eleventh, x.Twelfth));

    /// <summary>
    /// Creates a parser that first applies the given parser and then applies a transformation on its result.
    /// </summary>
    /// <typeparam name="T1">The first result type of the given input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the given input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the given input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the given input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the given input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the given input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the given input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the given input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the given input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the given input parser.</typeparam>
    /// <typeparam name="T11">The eleventh result type of the given input parser.</typeparam>
    /// <typeparam name="T12">The twelfth result type of the given input parser.</typeparam>
    /// <typeparam name="T13">The thirteenth result type of the given input parser.</typeparam>
    /// <typeparam name="TOutput">The result type of the transformation.</typeparam>
    /// <param name="parser">The given input parser.</param>
    /// <param name="transformation">The transformation to apply on the parser result.</param>
    /// <returns>A parser first applying the given parser and then applying a transformation on its result.</returns>
    public static IParser<TOutput> Transform<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TOutput>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth)> parser, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TOutput> transformation)
        => parser.Transform(x => transformation(x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth, x.Eleventh, x.Twelfth, x.Thirteenth));

    /// <summary>
    /// Creates a parser that first applies the given parser and then applies a transformation on its result.
    /// </summary>
    /// <typeparam name="T1">The first result type of the given input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the given input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the given input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the given input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the given input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the given input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the given input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the given input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the given input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the given input parser.</typeparam>
    /// <typeparam name="T11">The eleventh result type of the given input parser.</typeparam>
    /// <typeparam name="T12">The twelfth result type of the given input parser.</typeparam>
    /// <typeparam name="T13">The thirteenth result type of the given input parser.</typeparam>
    /// <typeparam name="T14">The fourteenth result type of the given input parser.</typeparam>
    /// <typeparam name="TOutput">The result type of the transformation.</typeparam>
    /// <param name="parser">The given input parser.</param>
    /// <param name="transformation">The transformation to apply on the parser result.</param>
    /// <returns>A parser first applying the given parser and then applying a transformation on its result.</returns>
    public static IParser<TOutput> Transform<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TOutput>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth)> parser, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TOutput> transformation)
        => parser.Transform(x => transformation(x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth, x.Eleventh, x.Twelfth, x.Thirteenth, x.Fourteenth));

    /// <summary>
    /// Creates a parser that first applies the given parser and then applies a transformation on its result.
    /// </summary>
    /// <typeparam name="T1">The first result type of the given input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the given input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the given input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the given input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the given input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the given input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the given input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the given input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the given input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the given input parser.</typeparam>
    /// <typeparam name="T11">The eleventh result type of the given input parser.</typeparam>
    /// <typeparam name="T12">The twelfth result type of the given input parser.</typeparam>
    /// <typeparam name="T13">The thirteenth result type of the given input parser.</typeparam>
    /// <typeparam name="T14">The fourteenth result type of the given input parser.</typeparam>
    /// <typeparam name="T15">The fifteenth result type of the given input parser.</typeparam>
    /// <typeparam name="TOutput">The result type of the transformation.</typeparam>
    /// <param name="parser">The given input parser.</param>
    /// <param name="transformation">The transformation to apply on the parser result.</param>
    /// <returns>A parser first applying the given parser and then applying a transformation on its result.</returns>
    public static IParser<TOutput> Transform<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TOutput>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth, T15 Fifteenth)> parser, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TOutput> transformation)
        => parser.Transform(x => transformation(x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth, x.Eleventh, x.Twelfth, x.Thirteenth, x.Fourteenth, x.Fifteenth));

    /// <summary>
    /// Creates a parser that first applies the given parser and then applies a transformation on its result.
    /// </summary>
    /// <typeparam name="T1">The first result type of the given input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the given input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the given input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the given input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the given input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the given input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the given input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the given input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the given input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the given input parser.</typeparam>
    /// <typeparam name="T11">The eleventh result type of the given input parser.</typeparam>
    /// <typeparam name="T12">The twelfth result type of the given input parser.</typeparam>
    /// <typeparam name="T13">The thirteenth result type of the given input parser.</typeparam>
    /// <typeparam name="T14">The fourteenth result type of the given input parser.</typeparam>
    /// <typeparam name="T15">The fifteenth result type of the given input parser.</typeparam>
    /// <typeparam name="T16">The sixteenth result type of the given input parser.</typeparam>
    /// <typeparam name="TOutput">The result type of the transformation.</typeparam>
    /// <param name="parser">The given input parser.</param>
    /// <param name="transformation">The transformation to apply on the parser result.</param>
    /// <returns>A parser first applying the given parser and then applying a transformation on its result.</returns>
    public static IParser<TOutput> Transform<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TOutput>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth, T15 Fifteenth, T16 Sixteenth)> parser, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TOutput> transformation)
        => parser.Transform(x => transformation(x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth, x.Eleventh, x.Twelfth, x.Thirteenth, x.Fourteenth, x.Fifteenth, x.Sixteenth));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T<3>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third)> ThenAdd<T1, T2, T3>(this IParser<(T1 First, T2 Second)> first, IParser<T3> second)
        => first.ThenAdd<(T1 First, T2 Second), T3>(second)
        .Transform((x, y) => (x.First, x.Second, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T<4>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth)> ThenAdd<T1, T2, T3, T4>(this IParser<(T1 First, T2 Second, T3 Third)> first, IParser<T4> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third), T4>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T<5>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth)> ThenAdd<T1, T2, T3, T4, T5>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth)> first, IParser<T5> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth), T5>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T<6>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth)> ThenAdd<T1, T2, T3, T4, T5, T6>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth)> first, IParser<T6> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth), T6>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, x.Fifth, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T<7>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh)> ThenAdd<T1, T2, T3, T4, T5, T6, T7>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth)> first, IParser<T7> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth), T7>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T<8>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh)> first, IParser<T8> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh), T8>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T<9>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth)> first, IParser<T9> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth), T9>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the first input parser.</typeparam>
    /// <typeparam name="T<10>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth)> first, IParser<T10> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth), T10>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the first input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the first input parser.</typeparam>
    /// <typeparam name="T<11>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth)> first, IParser<T11> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth), T11>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the first input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the first input parser.</typeparam>
    /// <typeparam name="T11">The eleventh result type of the first input parser.</typeparam>
    /// <typeparam name="T<12>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh)> first, IParser<T12> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh), T12>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth, x.Eleventh, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the first input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the first input parser.</typeparam>
    /// <typeparam name="T11">The eleventh result type of the first input parser.</typeparam>
    /// <typeparam name="T12">The twelfth result type of the first input parser.</typeparam>
    /// <typeparam name="T<13>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth)> first, IParser<T13> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth), T13>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth, x.Eleventh, x.Twelfth, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the first input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the first input parser.</typeparam>
    /// <typeparam name="T11">The eleventh result type of the first input parser.</typeparam>
    /// <typeparam name="T12">The twelfth result type of the first input parser.</typeparam>
    /// <typeparam name="T13">The thirteenth result type of the first input parser.</typeparam>
    /// <typeparam name="T<14>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth)> first, IParser<T14> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth), T14>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth, x.Eleventh, x.Twelfth, x.Thirteenth, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the first input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the first input parser.</typeparam>
    /// <typeparam name="T11">The eleventh result type of the first input parser.</typeparam>
    /// <typeparam name="T12">The twelfth result type of the first input parser.</typeparam>
    /// <typeparam name="T13">The thirteenth result type of the first input parser.</typeparam>
    /// <typeparam name="T14">The fourteenth result type of the first input parser.</typeparam>
    /// <typeparam name="T<15>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth, T15 Fifteenth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth)> first, IParser<T15> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth), T15>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth, x.Eleventh, x.Twelfth, x.Thirteenth, x.Fourteenth, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the first input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the first input parser.</typeparam>
    /// <typeparam name="T11">The eleventh result type of the first input parser.</typeparam>
    /// <typeparam name="T12">The twelfth result type of the first input parser.</typeparam>
    /// <typeparam name="T13">The thirteenth result type of the first input parser.</typeparam>
    /// <typeparam name="T14">The fourteenth result type of the first input parser.</typeparam>
    /// <typeparam name="T15">The fifteenth result type of the first input parser.</typeparam>
    /// <typeparam name="T<16>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth, T15 Fifteenth, T16 Sixteenth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth, T15 Fifteenth)> first, IParser<T16> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth, T15 Fifteenth), T16>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth, x.Eleventh, x.Twelfth, x.Thirteenth, x.Fourteenth, x.Fifteenth, y));
    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T<3>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third)> ThenAdd<T1, T2, T3>(this IParser<(T1 First, T2 Second)> first, Func<(T1 First, T2 Second), IParser<T3>> second)
        => first.ThenAdd<(T1 First, T2 Second), T3>(second)
        .Transform((x, y) => (x.First, x.Second, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T<4>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth)> ThenAdd<T1, T2, T3, T4>(this IParser<(T1 First, T2 Second, T3 Third)> first, Func<(T1 First, T2 Second, T3 Third), IParser<T4>> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third), T4>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T<5>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth)> ThenAdd<T1, T2, T3, T4, T5>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth)> first, Func<(T1 First, T2 Second, T3 Third, T4 Fourth), IParser<T5>> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth), T5>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T<6>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth)> ThenAdd<T1, T2, T3, T4, T5, T6>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth)> first, Func<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth), IParser<T6>> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth), T6>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, x.Fifth, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T<7>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh)> ThenAdd<T1, T2, T3, T4, T5, T6, T7>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth)> first, Func<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth), IParser<T7>> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth), T7>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T<8>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh)> first, Func<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh), IParser<T8>> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh), T8>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T<9>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth)> first, Func<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth), IParser<T9>> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth), T9>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the first input parser.</typeparam>
    /// <typeparam name="T<10>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth)> first, Func<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth), IParser<T10>> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth), T10>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the first input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the first input parser.</typeparam>
    /// <typeparam name="T<11>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth)> first, Func<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth), IParser<T11>> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth), T11>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the first input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the first input parser.</typeparam>
    /// <typeparam name="T11">The eleventh result type of the first input parser.</typeparam>
    /// <typeparam name="T<12>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh)> first, Func<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh), IParser<T12>> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh), T12>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth, x.Eleventh, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the first input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the first input parser.</typeparam>
    /// <typeparam name="T11">The eleventh result type of the first input parser.</typeparam>
    /// <typeparam name="T12">The twelfth result type of the first input parser.</typeparam>
    /// <typeparam name="T<13>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth)> first, Func<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth), IParser<T13>> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth), T13>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth, x.Eleventh, x.Twelfth, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the first input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the first input parser.</typeparam>
    /// <typeparam name="T11">The eleventh result type of the first input parser.</typeparam>
    /// <typeparam name="T12">The twelfth result type of the first input parser.</typeparam>
    /// <typeparam name="T13">The thirteenth result type of the first input parser.</typeparam>
    /// <typeparam name="T<14>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth)> first, Func<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth), IParser<T14>> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth), T14>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth, x.Eleventh, x.Twelfth, x.Thirteenth, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the first input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the first input parser.</typeparam>
    /// <typeparam name="T11">The eleventh result type of the first input parser.</typeparam>
    /// <typeparam name="T12">The twelfth result type of the first input parser.</typeparam>
    /// <typeparam name="T13">The thirteenth result type of the first input parser.</typeparam>
    /// <typeparam name="T14">The fourteenth result type of the first input parser.</typeparam>
    /// <typeparam name="T<15>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth, T15 Fifteenth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth)> first, Func<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth), IParser<T15>> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth), T15>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth, x.Eleventh, x.Twelfth, x.Thirteenth, x.Fourteenth, y));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the first input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the first input parser.</typeparam>
    /// <typeparam name="T11">The eleventh result type of the first input parser.</typeparam>
    /// <typeparam name="T12">The twelfth result type of the first input parser.</typeparam>
    /// <typeparam name="T13">The thirteenth result type of the first input parser.</typeparam>
    /// <typeparam name="T14">The fourteenth result type of the first input parser.</typeparam>
    /// <typeparam name="T15">The fifteenth result type of the first input parser.</typeparam>
    /// <typeparam name="T<16>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth, T15 Fifteenth, T16 Sixteenth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth, T15 Fifteenth)> first, Func<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth, T15 Fifteenth), IParser<T16>> second)
        => first.ThenAdd<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth, T15 Fifteenth), T16>(second)
        .Transform((x, y) => (x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth, x.Eleventh, x.Twelfth, x.Thirteenth, x.Fourteenth, x.Fifteenth, y));
    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T<3>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third)> ThenAdd<T1, T2, T3>(this IParser<(T1 First, T2 Second)> first, Func<T1, T2, IParser<T3>> second)
        => first.ThenAdd(x => second(x.First, x.Second));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T<4>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth)> ThenAdd<T1, T2, T3, T4>(this IParser<(T1 First, T2 Second, T3 Third)> first, Func<T1, T2, T3, IParser<T4>> second)
        => first.ThenAdd(x => second(x.First, x.Second, x.Third));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T<5>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth)> ThenAdd<T1, T2, T3, T4, T5>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth)> first, Func<T1, T2, T3, T4, IParser<T5>> second)
        => first.ThenAdd(x => second(x.First, x.Second, x.Third, x.Fourth));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T<6>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth)> ThenAdd<T1, T2, T3, T4, T5, T6>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth)> first, Func<T1, T2, T3, T4, T5, IParser<T6>> second)
        => first.ThenAdd(x => second(x.First, x.Second, x.Third, x.Fourth, x.Fifth));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T<7>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh)> ThenAdd<T1, T2, T3, T4, T5, T6, T7>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth)> first, Func<T1, T2, T3, T4, T5, T6, IParser<T7>> second)
        => first.ThenAdd(x => second(x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T<8>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh)> first, Func<T1, T2, T3, T4, T5, T6, T7, IParser<T8>> second)
        => first.ThenAdd(x => second(x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T<9>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth)> first, Func<T1, T2, T3, T4, T5, T6, T7, T8, IParser<T9>> second)
        => first.ThenAdd(x => second(x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the first input parser.</typeparam>
    /// <typeparam name="T<10>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth)> first, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, IParser<T10>> second)
        => first.ThenAdd(x => second(x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the first input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the first input parser.</typeparam>
    /// <typeparam name="T<11>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth)> first, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, IParser<T11>> second)
        => first.ThenAdd(x => second(x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the first input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the first input parser.</typeparam>
    /// <typeparam name="T11">The eleventh result type of the first input parser.</typeparam>
    /// <typeparam name="T<12>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh)> first, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, IParser<T12>> second)
        => first.ThenAdd(x => second(x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth, x.Eleventh));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the first input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the first input parser.</typeparam>
    /// <typeparam name="T11">The eleventh result type of the first input parser.</typeparam>
    /// <typeparam name="T12">The twelfth result type of the first input parser.</typeparam>
    /// <typeparam name="T<13>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth)> first, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, IParser<T13>> second)
        => first.ThenAdd(x => second(x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth, x.Eleventh, x.Twelfth));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the first input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the first input parser.</typeparam>
    /// <typeparam name="T11">The eleventh result type of the first input parser.</typeparam>
    /// <typeparam name="T12">The twelfth result type of the first input parser.</typeparam>
    /// <typeparam name="T13">The thirteenth result type of the first input parser.</typeparam>
    /// <typeparam name="T<14>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth)> first, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, IParser<T14>> second)
        => first.ThenAdd(x => second(x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth, x.Eleventh, x.Twelfth, x.Thirteenth));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the first input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the first input parser.</typeparam>
    /// <typeparam name="T11">The eleventh result type of the first input parser.</typeparam>
    /// <typeparam name="T12">The twelfth result type of the first input parser.</typeparam>
    /// <typeparam name="T13">The thirteenth result type of the first input parser.</typeparam>
    /// <typeparam name="T14">The fourteenth result type of the first input parser.</typeparam>
    /// <typeparam name="T<15>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth, T15 Fifteenth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth)> first, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, IParser<T15>> second)
        => first.ThenAdd(x => second(x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth, x.Eleventh, x.Twelfth, x.Thirteenth, x.Fourteenth));

    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
    /// <typeparam name="T1">The first result type of the first input parser.</typeparam>
    /// <typeparam name="T2">The second result type of the first input parser.</typeparam>
    /// <typeparam name="T3">The third result type of the first input parser.</typeparam>
    /// <typeparam name="T4">The fourth result type of the first input parser.</typeparam>
    /// <typeparam name="T5">The fifth result type of the first input parser.</typeparam>
    /// <typeparam name="T6">The sixth result type of the first input parser.</typeparam>
    /// <typeparam name="T7">The seventh result type of the first input parser.</typeparam>
    /// <typeparam name="T8">The eigth result type of the first input parser.</typeparam>
    /// <typeparam name="T9">The ninth result type of the first input parser.</typeparam>
    /// <typeparam name="T10">The tenth result type of the first input parser.</typeparam>
    /// <typeparam name="T11">The eleventh result type of the first input parser.</typeparam>
    /// <typeparam name="T12">The twelfth result type of the first input parser.</typeparam>
    /// <typeparam name="T13">The thirteenth result type of the first input parser.</typeparam>
    /// <typeparam name="T14">The fourteenth result type of the first input parser.</typeparam>
    /// <typeparam name="T15">The fifteenth result type of the first input parser.</typeparam>
    /// <typeparam name="T<16>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth, T15 Fifteenth, T16 Sixteenth)> ThenAdd<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(this IParser<(T1 First, T2 Second, T3 Third, T4 Fourth, T5 Fifth, T6 Sixth, T7 Seventh, T8 Eigth, T9 Ninth, T10 Tenth, T11 Eleventh, T12 Twelfth, T13 Thirteenth, T14 Fourteenth, T15 Fifteenth)> first, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, IParser<T16>> second)
        => first.ThenAdd(x => second(x.First, x.Second, x.Third, x.Fourth, x.Fifth, x.Sixth, x.Seventh, x.Eigth, x.Ninth, x.Tenth, x.Eleventh, x.Twelfth, x.Thirteenth, x.Fourteenth, x.Fifteenth));
}
