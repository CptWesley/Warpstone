<#@ output extension=".cs" #>
<#@ import namespace="System.Linq" #>
// <auto-generated />
#pragma warning disable

namespace Warpstone.Parsers;

public static partial class BasicParsers
{
<#
    int count = 16;
	for (var i = 2; i <= count; i++)
	{
#>
    /// <summary>
    /// Creates a parser that first applies the given parser and then applies a transformation on its result.
    /// </summary>
<#
        for (var t = 0; t < i; t++)
        {
#>
    /// <typeparam name="T<#= t + 1 #>">The <#= GetOrdinal(t + 1).ToLowerInvariant() #> result type of the given input parser.</typeparam>
<#
        }
#>
    /// <typeparam name="TOutput">The result type of the transformation.</typeparam>
    /// <param name="parser">The given input parser.</param>
    /// <param name="transformation">The transformation to apply on the parser result.</param>
    /// <returns>A parser first applying the given parser and then applying a transformation on its result.</returns>
    public static IParser<TOutput> Transform<<#= GetGenerics(i) #>, TOutput>(this IParser<(<#= GetTupleArguments(i) #>)> parser, Func<<#= GetGenerics(i) #>, TOutput> transformation)
        => parser.Transform(x => transformation(<#= GetInvocationArguments(i) #>));

<#
    }
#>
<#
	for (var i = 2; i <= count - 1; i++)
	{
#>
    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
<#
        for (var t = 0; t < i; t++)
        {
#>
    /// <typeparam name="T<#= t + 1 #>">The <#= GetOrdinal(t + 1).ToLowerInvariant() #> result type of the first parser.</typeparam>
<#
        }
#>
    /// <typeparam name="T<#= i + 1 #>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(<#= GetTupleArguments(i + 1) #>)> ThenAdd<<#= GetGenerics(i + 1) #>>(this IParser<(<#= GetTupleArguments(i) #>)> first, IParser<T<#= i + 1 #>> second)
        => first.ThenAdd<(<#= GetTupleArguments(i) #>), T<#= i + 1 #>>(second)
        .Transform((x, y) => (<#= GetInvocationArguments(i) #>, y));

<#
    }
#>
<#
	for (var i = 2; i <= count - 1; i++)
	{
#>
    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
<#
        for (var t = 0; t < i; t++)
        {
#>
    /// <typeparam name="T<#= t + 1 #>">The <#= GetOrdinal(t + 1).ToLowerInvariant() #> result type of the first parser.</typeparam>
<#
        }
#>
    /// <typeparam name="T<#= i + 1 #>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(<#= GetTupleArguments(i + 1) #>)> ThenAdd<<#= GetGenerics(i + 1) #>>(this IParser<(<#= GetTupleArguments(i) #>)> first, Func<(<#= GetTupleArguments(i) #>), IParser<T<#= i + 1 #>>> second)
        => first.ThenAdd<(<#= GetTupleArguments(i) #>), T<#= i + 1 #>>(second)
        .Transform((x, y) => (<#= GetInvocationArguments(i) #>, y));

<#
    }
#>
<#
	for (var i = 2; i <= count - 1; i++)
	{
#>
    /// <summary>
    /// Creates a parser that applies two parsers and combines the results.
    /// </summary>
<#
        for (var t = 0; t < i; t++)
        {
#>
    /// <typeparam name="T<#= t + 1 #>">The <#= GetOrdinal(t + 1).ToLowerInvariant() #> result type of the first parser.</typeparam>
<#
        }
#>
    /// <typeparam name="T<#= i + 1 #>">The result type of the second parser.</typeparam>
    /// <param name="first">The first parser.</param>
    /// <param name="second">The second parser.</param>
    /// <returns>A parser combining the results of both parsers.</returns>
    public static IParser<(<#= GetTupleArguments(i + 1) #>)> ThenAdd<<#= GetGenerics(i + 1) #>>(this IParser<(<#= GetTupleArguments(i) #>)> first, Func<<#= GetGenerics(i) #>, IParser<T<#= i + 1 #>>> second)
        => first.ThenAdd(x => second(<#= GetInvocationArguments(i) #>));

<#
    }
#>
}

<#+
    public static string GetOrdinal(int index)
        => index switch
        {
            0 => "Zeroth",
            1 => "First",
            2 => "Second",
            3 => "Third",
            4 => "Fourth",
            5 => "Fifth",
            6 => "Sixth",
            7 => "Seventh",
            8 => "Eigth",
            9 => "Ninth",
            10 => "Tenth",
            11 => "Eleventh",
            12 => "Twelfth",
            13 => "Thirteenth",
            14 => "Fourteenth",
            15 => "Fifteenth",
            16 => "Sixteenth",
            _ => "ERROR",
        };

    public static string GetGenerics(int index)
        => string.Join(", ", Enumerable.Range(1, index).Select(i => $"T{i}"));

    public static string GetTupleArguments(int index)
        => string.Join(", ", Enumerable.Range(1, index).Select(i => $"T{i} {GetOrdinal(i)}"));

    public static string GetInvocationArguments(int index)
        => string.Join(", ", Enumerable.Range(1, index).Select(i => $"x.{GetOrdinal(i)}"));
#>
